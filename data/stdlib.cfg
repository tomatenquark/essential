// console language standard library

// creates a macro whose body is a format string
// i.e. macro greet [ say Hi, %1! ]
macro = [
    $arg1 = (concat [format [@@arg2]] (loopconcat i $numargs [concatword " $arg" (+ $i 1)]))
]

// binds a key so that it will toggle a variable
// i.e. bindvar 9 thirdperson
bindvar = [
  bind $arg1 [@arg2 (= $@arg2 0); if (= $@arg2 0) [echo @@arg2 OFF] [ echo @@arg2 ON]]
]
bindvarquiet = [
  bind $arg1 [@arg2 (= $@arg2 0)]
]

// same as above, but only binds for edit mode
editbindvar = [
  editbind $arg1 [@arg2 (= $@arg2 0); if (= $@arg2 0) [echo @@arg2 OFF] [ echo @@arg2 ON]]
]
editbindvarquiet = [
  editbind $arg1 [@arg2 (= $@arg2 0)]
]

// binds a key so that it will set a modifier while held down
bindmod = [
  bind $arg1 [@arg2 1; onrelease [@@arg2 0]]
]

// same as above, but only binds for edit mode
editbindmod = [
  editbind $arg1 [@arg2 1; onrelease [@@arg2 0]]
]

quine = [ echo (format "quine = [%1]" $quine) ]

loadsky = [
    skybox $arg1
    if (> $numargs 1) [
        spinsky $arg2
    ] [
        if (!=f $spinsky 0) [spinsky 0]
    ]
]

mapmsg = [ maptitle $arg1 ]

//--Tomatenquark--

// generates a string of tabs
// i.e. echo (concatword (gentabs 2) "hello" (gentabs 5) "world")
gentabs = [loopconcatword n $arg1 "^t"]

// moves a gui item to any position
// i.e. guiitemmove 0 -5 -15 [guititle "Hi"]
guiitemmove = [
  guialign $arg1 [
    guistrut @arg2;
    guilist [
      guistrut @arg3;
      @arg4
    ]
  ]
]

// add a new item to a list
// i.e. echo (listadd [a c d] "d")
listadd = [concatword $arg1 " ^"" $arg2 "^"" ]

// replaces an existing item in a list by its position
// i.e. echo (listreplace [a c c] 1 "b")
listreplace = [listsplice $arg1 $arg3 $arg2 1]

// returns number of occurrences of an item in a given list
// i.e. echo (listoccount [item1 item2 item3 item2 item4 item2] "item2")
listoccount = [
  local _listoc _listocpos _listicount
  _listoc = 0
  _listicount = 0
  looplist i $arg1 [
    if (= $arg3 1) [
      if (> (strstr $i $arg2) -1) [_listoc = (+ $_listoc 1); append _listocpos $_listicount]
    ] [if (=s $i $arg2)[_listoc = (+ $_listoc 1); append _listocpos $_listicount]]
    _listicount = (+ $_listicount 1)
  ]
  if (arg4) [result $_listocpos] [result $_listoc]
]

// returns random item from given list
// i.e. echo (rndlist [hola hello olÃ¡ ahoy])
rndlist = [at $arg1 (rnd (listlen $arg1))]

// returns number of occurrences of a character in a string
// i.e. echo (stroccount "hello world" "o")
stroccount = [
  local _stroc _strocpos
  _stroc = 0
  loop i (strlen $arg1) [
    if (=s (substr $arg1 $i 1) $arg2)[_stroc = (+ $_stroc 1); append _strocpos $i]
  ]
  if (arg3) [result $_strocpos] [result $_stroc]
]

// returns an unformatted string
// i.e. echo (strreform "^f2hello^n^tworld^7!^f3!")
strreform = [
  _strre = (strreplace $arg1 "^n" "")
  _strre = (strreplace $arg1 "^t" "")
  loop i 9 [
    _strre = (strreplace $_strre (concatword "^f" $i) "")
  ]
  result $_strre
]

// replaces with items in argument 3 the items in argument 2 that are in argument 1
// i.e. echo (strreplace+ "I love mrfixit" ["love" "mrfixit"] ["hate" "ogro"])
strreplace+ = [
  local r
  r = $arg1
  loop s (listlen $arg2) [
    r = (strreplace $r (at $arg2 $s) (at $arg3 $s))
  ]
  result $r
]

// transforms the first character of each word to uppercase
// i.e. echo (strcapitalize "hello tomatenquark")
strcapitalize = [
  looplistconcat s $arg1 [concatword (strupper (substr $s 0 1)) (substr $s 1)]
]

// returns num of players and spectators (use 1 to count yourself)
// i.e. echo (concatword "players: " (at (numplayers 1) 0) " spectators: " (at (numplayers 1) 1))
numplayers = [
  _nactp = 0
  _nspct = 0
  looplist pcn (listclients $arg1 0) [
    if (= (isspectator $pcn) 0) [_nactp = (+ $_nactp 1)] [_nspct = (+ $_nspct 1)]
  ]
  result (concat $_nactp $_nspct)
]

// loads crosshairs from given path and saves them in a list

findcrosshairs = [
  loopfiles cs $arg1 "png" [
    _csHit = (concatword $arg1 "/" $cs "_hit.png")
    if (! (|| (= $arg2 1) (= (findfile $_csHit) 1))) [_csHit = "data/hit.png"] //checks if there is a _hit crosshair
    append crosshairs (concat "^"" (concatword $arg1 "/" $cs ".png") $_csHit "^"")
  ]
]

// removes repeated occurrences from a given list
// i.e. echo (listunrepeat ["a" "b" "c" "a" "d" "e"])
listunrepeat = [
  local _list
  looplist _i $arg1 [if (= (indexof $_list $_i) -1) [append _list $_i]]
  result $_list
]

// returns all items in a given list that match a string
// i.e. echo (listmatch ["blue" "light green" "light blue" "green" "dark green" "dark blue"] "green")
listmatch = [
  listfilter _l $arg1 [> (strstr $_l $arg2) -1]
]

// returns items from list 2 that may or may not match list 1, the third arg is the comparison operator
// i.e. echo (listdiff [a b c d g] [b d e f g] =)
listdiff = [
  listfilter _l $arg2 [$arg3 (indexof $arg1 $_l) -1]
]

// compares items from list 1 with list 2 one by one, returns 0 or index if different
listcompare = [
  _fleq = 1
  _flei = -1
  if (= (listlen $arg1) (listlen $arg2)) [
    looplist l1 $arg1 [
      if (= $_fleq 1) [
        if (!=s (at $arg2 (indexof $arg1 $l1)) $l1) [_fleq = 0; _flei = (indexof $arg1 $l1)]
      ]
    ]
  ] [_fleq = 0]
  if (= $arg3 1) [result $_flei] [result $_fleq]
]

// returns a list of files from a given folder/extension
// i.e. echo (getfileslist "packages/base" "ogz")
getfileslist = [
  local _list
  loopfiles fl $arg1 $arg2 [append _list (concatword "[" $fl "]")]
  result $_list
]
getfileslistlen = [result (listlen (getfileslist $arg1 $arg2))]

// returns index of last occurrence in a string
// i.e. echo (strstrlast "hello world" "o")
strstrlast = [
  _stra = "-1"
  loop s (strlen $arg1) [
    if (=s (substr $arg1 $s 1) $arg2) [_stra = $s]
  ]
  result $_stra
]

// returns color and privilege from a given client
getclientpriv = [
    _mmpriv = (concat "^f7" 0) //white common
    if (ismaster $arg1) [_mmpriv = (concat "^f0" 1)] //green master
    if (isadmin $arg1) [_mmpriv = (concat "^f6" 2)] //orange admin
    if (isauth $arg1) [_mmpriv = (concat "^f5" 3)] //purple auth
    result $_mmpriv
]

// checks if client has any kind of privileges
haspriv = [if (|| (ismaster $arg1) (isadmin $arg1)) [result 1] [result 0]]

// returns list of client numbers that pass the filter
// i.e. echo (filteradmins (listclients 1))
filtermasters     = [listfilter i $arg1 [ismaster    $i]]
filteradmins      = [listfilter i $arg1 [isadmin     $i]]
filterauths       = [listfilter i $arg1 [isauth      $i]]
filterspectators  = [listfilter i $arg1 [isspectator $i]]
filterignored     = [listfilter i $arg1 [isignored   $i]]
filterbots        = [listfilter i $arg1 [isai        $i]]
// same as above, but returns those that do not pass the filter
filter!masters    = [listfilter i $arg1 [! (ismaster    $i)]]
filter!admins     = [listfilter i $arg1 [! (isadmin     $i)]]
filter!auths      = [listfilter i $arg1 [! (isauth      $i)]]
filter!spectators = [listfilter i $arg1 [! (isspectator $i)]]
filter!ignored    = [listfilter i $arg1 [! (isignored   $i)]]
filter!bots       = [listfilter i $arg1 [! (isai        $i)]]

// ignores all empty folders in a given path
filteremptyfolder = [
  _clist = ""
  looplist folder $arg1 [
    _a = 0
    loopfiles file (concatword "packages/" $folder) $arg2 [
      _a = (+ $_a 1)
    ]
    if (> $_a 0) [append _clist $folder]
  ]
  result $_clist
]

// Loops through a given string's characters
// usage: /loopchar VAR "string" [action]
loopchar = [
    loop $arg1 (strlen $arg2) [
        $arg1 = (substr $arg2 $$arg1 1)
        arg3
    ]
]

// Function which "slides" text with configurable speed and spaces before repetition
// usage: (strscroll "YOUR TEXT" <string length> <speed in ms/char> <spaces between loop>
clamp  = [ max  $arg2 (min  $arg3 $arg1) ]
clampf = [ maxf $arg2 (minf $arg3 $arg1) ]
strscroll = [
    arg1 = (concat $arg1 (loopconcat i $arg4 []))
    arg4 = (strlen $arg1)
    substr (concatword $arg1 $arg1) (mod (div $getmillis $arg3) $arg4) (clamp $arg2 1 $arg4)
]
listscroll = [
    arg1 = (concat $arg1 (looplistconcat i $arg4 []))
    arg4 = (listlen $arg1)
    sublist (concatword $arg1 $arg1) (mod (div $getmillis $arg3) $arg4) (clamp $arg2 1 $arg4)
]

// Creates a text field with buttons to add or subtract a specified value
// accepts an optional fifth argument as an extra operator and a sixth argument as a digit limiter
// i.e. guinumfield fov 4 10 [echo $fov]
//      guinumfield crosshairsize 4 0.1 [] "+fround" 3
guinumfield = [
  _nv = 0
  guibutton "" [
    if (=s @arg5 "") [
      _nv = (-- $@@arg1 @@arg3)
    ] [
      _nv = (@@arg5 $@@arg1 (concatword "-" @@arg3))
    ]
    if (!=s (getalias @arg1) "") [@@arg1 = $_nv] [@@arg1 (substr $_nv 0 @@arg6)]

  ] "minus.png"
  guifield $arg1 $arg2 [arg4]
  guibutton "" [
    if (=s @arg5 "") [
      _nv = (++ $@@arg1 @@arg3)
    ] [
      _nv = (@@arg5 $@@arg1 @@arg3)
    ]
    if (!=s (getalias @arg1) "") [@@arg1 = $_nv] [@@arg1 (substr $_nv 0 @@arg6)]
  ] "plus.png"
]

// Creates a color slider with predefined R G B texts
guilabelslider = [guislider $arg1 $arg2 $arg3 [@arg4]; guiitemmove -1 -1 -1 [(guitext @arg5 0)]]
_getgcl = [if (!=s (getalias (concatword "_gcl" $arg1 "_" $arg2)) "") [result $(concatword "_gcl" $arg1 "_" $arg2)] [result 0]]
guicolorslider = [
  _gclbl = [[3R] [0G] [1B]]
  looplist c $_gclbl [
    guilabelslider (concatword "_gcl" $arg1 "_" (indexof $_gclbl $c)) $arg2 $arg3 [@arg1 (_getgcl @arg1 0) (_getgcl @arg1 1) (_getgcl @arg1 2); @arg4] $c
  ]
]

// Changes text color based on its state
strstatecolor = [
  if (=s $arg3 "") [arg3 = "4"]; if (=s $arg4 "") [arg4 = "0"]
  result (concatword "^f" (at [@arg3 @arg4] $arg1) $arg2)
]

// Break list into parts
// usage: (breaklist [ LIST ] <PARTS>)
breaklist = [
  loopconcat i (ceil (divf (listlen $arg1) $arg2)) [
    result [[@@(sublist $arg1 (* $i $arg2) $arg2)]]
  ]
]

// generates a list containing a limited number of items, with buttons for navigating pages
// i.e. guilistpages id [item1 item2 item3 item4 item5 item6] [guitext $id] 2
guilistpages = [
  local _curlist _cursublist
  nodebug [
    if (=s (getalias (concatword "_curtab" $arg1)) "") [_curtab@arg1 = $arg4]
    _curlist = $arg2
    _cursublist = (sublist $_curlist (- $(concatword "_curtab" $arg1) $arg4) $arg4)
    looplist $arg1 $_cursublist [arg3]
    loop _e (- $arg4 (listlen $_cursublist)) [guitext "" 0]
    guilist [
      guibutton "" [
        if (<= $_curtab@@arg1 @arg4) [_curtab@@@arg1 = (listlen $_curlist)] [_curtab@@@arg1 = (- $_curtab@@@arg1 @@arg4)]
      ] "arrow_bw"
      guitext (format "^f7%1^f4/%2" (div (nextmpof $_curtab@arg1 $arg4) $arg4) (div (nextmpof (listlen $_curlist) $arg4) $arg4)) 0
      guibutton "" [
        if (>= $_curtab@@arg1 (listlen $_curlist)) [_curtab@@@arg1 = @@arg4] [_curtab@@@arg1 = (+ $_curtab@@@arg1 @@arg4)]
      ] "arrow_fw"
      arg5
    ]
  ]
]

// similar to guilistpages, but with a slider instead of buttons
guilistscroll = [
  local _curlist _cursublist
  if (!=s $arg2 "") [
    nodebug [
      if (=s (getalias (concatword "_curtab" $arg1)) "") [(concatword "_curtab" $arg1) = 0]
      _curlist = $arg2
      _cursublist = (sublist $_curlist $(concatword "_curtab" $arg1) $arg4)
      guilist [
        if (&& (|| (=s $arg5 "") (!= $arg5 0)) (> (listlen $_curlist) $arg4)) [guislider (concatword "_curtab" $arg1) (- (listlen $_curlist) $arg4) 0]
        guilist [
          looplist $arg1 $_cursublist [arg3]
          if (> (listlen $_curlist) $arg4) [loop _e (- $arg4 (listlen $_cursublist)) [guitext "" 0]]
        ]
      ]
      arg6
    ]
  ] [arg7]
]

// returns all occurrences between two delimiters
// i.e. getstrbetween "##This will be!! invisible ##visible!!" "##" "!!" 1
getstrbetween = [
  local _fr
  loop n (listlen (strstrlist $arg1 $arg2)) [
    append _fr (concatword "[" (substr $arg1 (at (strstrlist $arg1 $arg2) $n)  (+ (at (strstrlist $arg1 $arg3) $n) (strlen $arg3))) "]")
  ]
  if (= $arg4 1) [_fr = (strreplace (strreplace $_fr $arg2 "") $arg3 "")]
  if (= $arg4 2) [_fr = (strreplace $_fr $arg2 "")]
  if (= $arg4 3) [_fr = (strreplace $_fr $arg3 "")]
  if (|| (=s $_fr "") (=s $_fr "[]")) [_fr = -1]
  result $_fr
]

// similar to strstr, but the third argument defines the initial search position
// i.e. strstr+ "tomatenquark" "t" 1
strstr+ = [
  arg1 = (strstr (substr $arg1 $arg3) $arg2)
  if (>= $arg1 0) [+ $arg1 $arg3] [result -1]
]

// returns indices of all occurrences of one string in another
// i.e. strstrlist "how much wood would a woodchuck chuck if a woodchuck could chuck wood?" "wood"
strstrlist = [
    local i l idc
    i = 0 ; l = (strlen $arg2)
    while [> $i -1] [
        i = (strstr+ $arg1 $arg2 $i)
        if (>= $i 0) [
            append idc $i
            i = (+ $i $l)
        ]
    ]
    result $idc
]

// define a variable if it does not exist
initvar = [nodebug [if (=s $$arg1 "") [$arg1 = $arg2]]]

// same as loopconcatword, but with fewer arguments
// i.e. loopstr " repeat" 16
loopstr = [loopconcatword s $arg2 [result $arg1]]

// same as case, but can compare with multiple values
// i.e. caseor "abc" [def jkl mno abc] [echo 1]
caseor = [looplist l $arg2 [if (=s $arg1 $l) [arg3]]]

//maths
gcd = [ if (= $arg2 0) [ result $arg1 ] [ gcd $arg2 (modf $arg1 $arg2) ] ]
lcm = [ div (* $arg1 $arg2) (gcd $arg1 $arg2) ]
-- = [if (>= $arg1 $arg2) [result (- $arg1 $arg2)] [result 0]]
++ = [if (|| (=s $arg3 "") (<= $arg1 (- $arg3 $arg2))) [result (+ $arg1 $arg2)] [result $arg3]]
+fround = [round (+f $arg1 $arg2) (absf $arg2)]
mpof = [result (mod (- $arg2 (mod $arg1 $arg2)) $arg2)]
nextmpof = [result (+ $arg1 (mpof $arg1 $arg2))]