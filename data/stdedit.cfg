
// implements some editing commands

// entity editing //
=enttype = [
	|| [strcmp * $arg1] [strcmp (enttype) $arg1]
]

=entattr = [
	|| [strcmp * $arg2] [= (entattr $arg1) $arg2]
]

// clear ents of given type
clearents = [
		if $editing [
		entcancel
		entselect [=enttype $arg1];
		echo (concat "deleted" (enthavesel) $arg1 "entities");
		delent
	]
]

// replace all ents that match current selection
// with the values given
replaceents = [
	if $editing [
		do [
			entfind @(entget)
			entset @(loopconcat i $numargs [result $[arg@(+ $i 1)]])
		]
		echo (concat "replaced" (enthavesel) "entities")
	]
]

selentedit = [saycommand (concatword "/entset " (entget))]
selreplaceents = [saycommand (concatword "/replaceents " (entget))]
selentfindall = [do [entfind @(entget)]]

// modify given attribute of ent by a given amount
// arg1 attribute
// arg2 value
entproperty = [entattr $arg1 (+ (entattr $arg1) $arg2)]

enttypelist = [
	"light" "mapmodel" "playerstart" "envmap" "particles" "sound"
	"shells" "bullets" "rockets" "riflerounds" "grenades" "cartridges"
	"health" "healthboost" "greenarmour" "yellowarmour" "quaddamage"
	"teleport" "teledest" "monster" "carrot" "jumppad"
	"base" "respawnpoint" "spotlight" "box" "barrel"
	"platform" "elevator" "flag"
]

enttypeselect = [
	local next
	enttypelength = (listlen $enttypelist)
	next = (mod (+ (indexof $enttypelist (enttype)) $arg1) $enttypelength)
	if (< $next 0) [next = (+ $next $enttypelength)]
	do [entset @(listsplice (entget) (at $enttypelist $next) 0 1)]
]

// entity primary actions //
_ent_action_base				= [entproperty 0 (* $arg1 1 )]
_ent_action_teleport		= [entproperty 0 (* $arg1 1 )]
_ent_action_teledest		= [entproperty 1 (* $arg1 1 )]
_ent_action_mapmodel		= [entproperty 1 (* $arg1 1 )]
_ent_action_spotlight		= [entproperty 0 (* $arg1 5 )]
_ent_action_light 			= [entproperty 0 (* $arg1 5 )]
_ent_action_jumppad			= [entproperty 0 (* $arg1 5 )]
_ent_action_respawnpoint = [entproperty 0 (* $arg1 15)]
_ent_action_playerstart	= [entproperty 0 (* $arg1 15)]
_ent_action_envmap			= [entproperty 0 (* $arg1 5)]
_ent_action_particles		= [entproperty 0 (* $arg1 1)]
_ent_action_sound				= [entproperty 0 (* $arg1 1)]
_ent_action_cycle				= [entset (if (> $arg1 -1) [result $arg2] [result $arg3])]
_ent_action_shells			= [_ent_action_cycle $arg1 bullets quaddamage]
_ent_action_bullets			= [_ent_action_cycle $arg1 rockets shells]
_ent_action_rockets			= [_ent_action_cycle $arg1 riflerounds bullets]
_ent_action_riflerounds	= [_ent_action_cycle $arg1 grenades rockets]
_ent_action_grenades		= [_ent_action_cycle $arg1 cartridges riflerounds]
_ent_action_cartridges	= [_ent_action_cycle $arg1 quaddamage grenades]
_ent_action_quaddamage	= [_ent_action_cycle $arg1 shells cartridges]
_ent_action_health			= [_ent_action_cycle $arg1 healthboost yellowarmour]
_ent_action_healthboost	= [_ent_action_cycle $arg1 greenarmour health]
_ent_action_greenarmour	= [_ent_action_cycle $arg1 yellowarmour healthboost]
_ent_action_yellowarmour = [_ent_action_cycle $arg1 health greenarmour]
_ent_action_monster			= [entproperty 1 (* $arg1 1)]
_ent_action_box					= [entproperty 1 (* $arg1 1)]
_ent_action_barrel			= [entproperty 1 (* $arg1 1)]
_ent_action_platform		= [entproperty 1 (* $arg1 1)]
_ent_action_elevator		= [entproperty 1 (* $arg1 1)]

// copy and paste //
// 3 types of copying and pasting
// 1. select only cubes      -> paste only cubes
// 2. select cubes and ents  -> paste cubes and ents. same relative positions
// 3. select only ents       -> paste last selected ent. if ents are selected, replace attrs as paste

opaquepaste = 1
entcopybuf = ""

entreplace = [
	do [
		if (enthavesel) [] [newent @entcopybuf]
		entset @entcopybuf
	]
]

editcopy = [
	if (|| [havesel] [! (enthavesel)]) [
		entcopybuf = ""
		entcopy
		copy
	] [
		entcopybuf = (entget)
	]
]

editpaste = [
	cancelpaste = (! (|| $enthavesel $havesel));
	if (strcmp "" $entcopybuf) [
		pastehilite
		reorient
		onrelease [
			if $opaquepaste delcube
			paste
			entpaste
			if $cancelpaste [cancelsel]
		]
	] [
		entreplace
		if $cancelpaste [cancelsel]
	]
]

// selection //

// select ents with given properties
// '*' is wildcard
entfind = [
	if (= $numargs 0) [
		entselect 1
	] [
		entselect (concat [&& [=enttype @@arg1]] (loopconcat i (- $numargs 1) [
			result [[=entattr @@i @@[arg@(+ $i 2)]]]
		]))
	]
]

entfindinsel = [
	if (= $numargs 0) [
		entselect [insel]
	] [
		entselect (concat [&& [insel] [=enttype @@arg1]] (loopconcat i (- $numargs 1) [
			result [[=entattr @@i @@[arg@(+ $i 2)]]]
		]))
	]
]

listselents = [
	local list
	entloop [append list (entget)]
	if (> (listlen $list) 0) [echo $list]
	echo (concat (enthavesel) "entities selected")
]

drag 			= [dragging 1; onrelease [dragging 0]]
corners 	= [selectcorners 1; dragging 1; onrelease [selectcorners 0; dragging 0]]
editmove 	= [moving 1; onrelease [moving 0]; result $moving]
entdrag 	= [entmoving 1; onrelease [entmoving 0]; result $entmoving]
editdrag 	= [cancelsel; || [entdrag] [drag]]
selcorners = [if $hmapedit [hmapselect] [cancelsel; || [entdrag] [corners]]]
editextend = [|| [entdrag] [selextend; reorient; editmove]]

editmovewith = [
	if (havesel) [
		|| [editmove] [@arg1]
		onrelease [moving 0; dragging 0]
	] [
		@arg1
	]
]

editmovecorner = [editmovewith selcorners]
editmovedrag = [editmovewith editdrag]

// other editing commands //

editfacewentpush = [
	if (|| [havesel] [! (enthavesel)]) [
		if $moving [
			pushsel $arg1
		] [
			entcancel
			editface $arg1 $arg2
		]
	] [
		if $entmoving [entpush $arg1] [_ent_action_@(enttype) $arg1]
	]
]

entswithdirection = ["playerstart" "teledest" "mapmodel" "monster" "box" "barrel" "platform" "elevator"]

entdirection = [
	if (&& [enthavesel] [ = (havesel) 0 ]) [
		if (>= (indexof $entswithdirection (enttype)) 0) [
			if (> $arg1 0) [
				entproperty 0 $arg2
				if (> (entattr 0) 360) [entproperty 0 -360]
			] [
				entproperty 0 (- 0 $arg2)
				if (< (entattr 0) 0) [entproperty 0 360]
			]
		]
		result 1
	] [
		result 0
	]
]

editdel = [if (! (enthavesel)) [delcube]; delent]
editflip = [flip; entflip]

editrotate = [
	|| [ entdirection $arg1 15 ] [
		rotate $arg1
		entrotate $arg1
	]
]

editcut = [
	if (moving 1) [
		if (= $moving 1) [selsave]
		onrelease [
			moving 0
			if (selmoved) [
				selswap
				copy; entcopy
				delcube; delent
				selrestore
				paste; entpaste
			]
		]
	]
]

passthrough = [
	passthroughsel $arg1;
	if $arg1 [
		passthroughcube_bak = $passthroughcube
		passthroughcube 1
	] [
		passthroughcube $passthroughcube_bak
	]
	entcancel
	if $setting_entediting [entediting (! $arg1)]
]

edithud = [
	format "%5^f7%6^f7gridsize :^f2 %1 ^f7| mapscale :^f2 %2 ^f7| floatspeed :^f2 %3 ^f7| allfaces : %4" $gridpower $mapscale $floatspeed (? $allfaces "^f3Yes" "^f0No") (
		? $hmapedit (format "brush^f2 %1 ^f7:^f2 %2^n" $brushindex $brushname) (
			? $blendpaintmode (
				format "blendpaint mode : ^f2%1^f7^nblend brush : ^f2%2^n" (at $blendpaintmodes $blendpaintmode) (getblendbrushname $curblendbrush)
			) (? (! $enthavesel) (
				format "index^f2 %1 ^f7:^f2 %2^n" (max 0 $getseltex) (gettexname $getseltex)
			))
		)
	) (? $enthavesel (concat (entget) ":^f2" $enthavesel "^f7selected^n"))
]

_editbindhold = 0
holdhidehud = [
	if (! $_editbindhold) [_curmillis = (getmillis); hidehud 1; _editbindhold = 1]
	onrelease [
		if (< (getmillis) (+ $_curmillis 500)) [hidehud 0]
		_editbindhold = 0
	]
]

entcomplete = [listcomplete $arg1 $enttypelist]
entcomplete newent
entcomplete entfind
entcomplete clearents

listcomplete editmat "air water clip glass noclip lava gameclip death alpha"
air = [editmat air $arg1]
loop i 4 [
	[water@(? $i (+ $i 1))] = [editmat water@(? $i (+ $i 1)) $arg1]
	[lava@(? $i (+ $i 1))] = [editmat lava@(? $i (+ $i 1)) $arg1]
	[glass@(? $i (+ $i 1))] = [editmat glass@(? $i (+ $i 1)) $arg1]
]
clip = [editmat clip $arg1]
noclip = [editmat noclip $arg1]
gameclip = [editmat gameclip $arg1]
death = [editmat death $arg1]
alpha = [editmat alpha $arg1]

blendpaintmodes = ["off" "replace" "dig" "fill" "inverted dig" "inverted fill"]
setblendpaintmode = [
	if (> $numargs 0) [blendpaintmode $arg1] [blendpaintmode 0]
	echo "blend paint mode set to:" (at $blendpaintmodes $blendpaintmode)
]
scrollblendbrush = [
	if (> $numargs 0) [nextblendbrush $arg1] [nextblendbrush]
	echo "blend brush set to:" (getblendbrushname (curblendbrush))
]

minimaphere = [minimapheight (at (getcampos) 2)]

getsundir = [sunlightyaw (getcamyaw); sunlightpitch (getcampitch)]

echovcolor  = [echo (concat "vcolor:"  (getvcolor  $getseltex))]
echovrotate = [echo (concat "vrotate:" (getvrotate $getseltex))]
echovoffset = [echo (concat "voffset:" (getvoffset $getseltex))]
echovscroll = [echo (concat "vscroll:" (getvscroll $getseltex))]
echovscale  = [echo (concat "vscale:"  (getvscale  $getseltex))]
echovlayer  = [echo (concat "vlayer:"  (getvlayer  $getseltex))]
echovalpha  = [echo (concat "valpha:"  (getvalpha  $getseltex))]

printvshaderparamnames = [echo (getvshaderparamnames $getseltex)] // echoes the name of altered shaderparam, if used
printvshaderparam = [echo (getvshaderparamnames $getseltex) (getvshaderparam $getseltex (getvshaderparamnames $getseltex))  ]
// printvshaderparamenvscale       = [echo (getvshaderparam $getseltex envscale)]
// printvshaderparamglowcolor      = [echo (getvshaderparam $getseltex glowcolor)]
// printvshaderparamparallaxscale  = [echo (getvshaderparam $getseltex parallaxscale)]
// printvshaderparampulseglowcolor = [echo (getvshaderparam $getseltex pulseglowcolor)]
// printvshaderparampulseglowspeed = [echo (getvshaderparam $getseltex pulseglowspeed)]
// printvshaderparampulsespeed     = [echo (getvshaderparam $getseltex pulsespeed)]
// printvshaderparamspecscale      = [echo (getvshaderparam $getseltex specscale)]

allpickupents = ["shells" "bullets" "rockets" "riflerounds" "grenades" "cartridges" "greenarmour" "yellowarmour" "health" "healthboost" "quaddamage"]
findpickupents = [looplist pe $allpickupents [entfind $pe]]

//--Tomatenquark--
getmapemptyslots = [
	local _list
	loop t $numslots [
		if (=s (gettexname $t) "") [
			append _list $t
		]
	]
	result $_list
]

fixmapslots = [
	_maptexturesinuse = (getmaptextures)
	_maptextures = (getmaptextures 1)

	//v commands
	local _tvcmds
	looplist t $_maptexturesinuse [
		tid = (indexof $_maptextures $t)
		append _tvcmds (concatword "[[" (getvrotate $tid) "]" "[" (getvoffset $tid) "]" "[" (getvscale $tid) "]]")
	]

	//reorder slots
	looplist mt $_maptexturesinuse [
		replacetex (indexof $_maptextures $mt) (indexof $_maptexturesinuse $mt)
	]

	//fix texture list
	texturereset
	loop v (listlen $_maptexturesinuse) [
		_curtexvcmds = (at $_tvcmds $v)
		texture 0 (at $_maptexturesinuse $v) (at $_curtexvcmds 0) (at (at $_curtexvcmds 1) 0) (at (at $_curtexvcmds 1) 1) (at $_curtexvcmds 2)
	]
	compactvslots
]

// returns list of loaded textures
// may return textures that were loaded but not used, reload the map to get a accurate list
// 1 returns all registered textures
getmaptextures = [
	local _list
	if (!= $arg1 1) [
		_list = "textures\sky.png"
	]
	loop t $numslots [
		if (!=s (gettexname $t) "") [
			if (= $arg1 1) [
				append _list (gettexname $t)
			] [
				if (= (texloaded $t) 1) [append _list (gettexname $t)]
			]
		]
	]
	result $_list
]

// same as above, but for mapmodels
getmapmodels = [loopconcat i (nummapmodels) (? (= $arg1 1) [$arg2 $i] [if (mapmodelloaded $i) [$arg2 $i]])]

// returns a map.cfg file containing all textures and models in use
// if the argument is 1, all unused content will be "physically" removed and mapmodels will be reordered
genmapcfg = [
	local _itex _mcfgempty
	if (= $editing 0) [edittoggle]
	_mcfg = "//basic configuration file generated by Tomatenquark^n"
	_itex = 0
	_mcfgempty = 0

	// some map vars
	looplist mvar [sunlight sunlightpitch sunlightyaw skybox] [
		_mcfg = (concat $_mcfg $mvar $(getalias mvar) "^n")
	]

	// textures
	loop t (+ (indexof (getmaptextures 1) (at (getmaptextures) (- (listlen (getmaptextures)) 1) )) 1) [
		if (> (indexof (getmaptextures) (at (getmaptextures 1) $t)) -1) [
			if (> $_mcfgempty 0) [
				_mcfg = (concatword $_mcfg "^nloop i " $_mcfgempty " [texture 0 ^"^"] // empty slot")
				_mcfgempty = 0
			]
			_mcfg = (concatword $_mcfg "^n texture c ^"" (at (getmaptextures 1) $t) "^"") (getvrotate $t) (getvoffset $t) (getvscale $t)
			if (= (findfile (concatword "packages/" (at (getmaptextures 1) $t))) 0) [
				_itex = (+ $_itex 1)
				_mcfg = (concatword $_mcfg " // not found")
			]
		] [
			if (= $arg1 1) [
				_mcfgempty = (+ $_mcfgempty 1)
			]
		]
	]

	// mapmodels
	looplist m (getmapmodels 0 "mapmodelname") [
		_mcfg = (concatword $_mcfg "^nmmodel ^"" $m "^"")
	]

	if (= $arg1 1) [
		echo (format "^f7done^n^f0+%1 ^f~textures (^f3-%2^f~)^n^f0+%3 ^f~mapmodels (^f3-%4^f~)^n^f2%5 ^f~missing textures" (listlen (getmaptextures)) (- (numslots) (listlen (getmaptextures))) (listlen (getmapmodels 0 "mapmodelname")) (- (nummapmodels) (listlen (getmapmodels 0 "mapmodelname"))) $_itex)
		texturereset
		mapmodelreset
		do $_mcfg
	]

	if (|| (= $arg1 0) (= $arg1 1)) [
		// fix mapmodels
		entcancel
		entfind mapmodel
		local _mmi
		entloop [append _mmi (entattr 1)] //list indexes
		entloop [entset mapmodel (entattr) (indexof (sortlist (listunrepeat $_mmi) s e [< $s $e]) (entattr 1))] //reorders after the mapmodelreset
		entcancel
	]
	result $_mcfg
]

moveselforward = [
	local _cyaw
	if (&& (>= (getcampitch) -45) (<= (getcampitch) 45)) [
		_cyaw = (getcamyaw)
		if (&& (>f $_cyaw 224) (<f $_cyaw 315)) [movesel 1 0]
		if (|| (>f $_cyaw 315) (<f $_cyaw 44)) [movesel 1 1]
		if (&& (>f $_cyaw 44) (<f $_cyaw 135)) [movesel -1 0]
		if (&& (>f $_cyaw 135) (<f $_cyaw 224)) [movesel -1 1]
	]
	if (>f (getcampitch) 20) [movesel 1 2]
	if (<f (getcampitch) -20) [movesel -1 2]
]

getaimpos = [
	local coeff
	coeff = (cos $getcampitch)
	concat (
		+f (at $getcampos 0) (*f [-@arg1] (*f $coeff (sin $getcamyaw)))
	) (
		+f (at $getcampos 1) (*f $arg1 (*f $coeff (cos $getcamyaw)))
	) (
		+f (at $getcampos 2) (*f $arg1 (sin $getcampitch))
	)
]

getposdistance = [
	sqrt ((+f (+f (pow (-f (at $arg2 0) (at $arg1 0)) 2) (pow (-f (at $arg2 1) (at $arg1 1)) 2)) (pow (-f (at $arg2 2) (at $arg1 2)) 2)))
]

moveseltocursor = [copy; editextend; cancelsel; sleep 1 [pastehilite]]

// universal scrollwheel + modifier commands:
defaultmodifier = 0
modifier = $defaultmodifier
domodifier = [modifier = $arg1; onrelease [modifier = $defaultmodifier]]

universaldelta = [do [delta_@(if $editing [result edit] [result game])_@modifier @arg1]]

delta_game_0 = [if (= $arg1 1) [weapon 2 3 5 4 1 6 0] [weapon 4 1 6 2 3 5 0]]

delta_edit_0 = [
	if $blendpaintmode [
		scrollblendbrush $arg1
	] [
		editfacewentpush $arg1 1 // Fill and Empty cube
	]
]

delta_edit_1 = [nodebug [ gridpower (+ $arg1 $gridpower)]]
delta_edit_2 = [editfacewentpush $arg1 0] // push face/corners selected
delta_edit_3 = [editfacewentpush $arg1 2] // push corner pointed at by cursor
delta_edit_4 = [if $blendpaintmode [rotateblendbrush $arg1] [editrotate $arg1]] // rotate 90 degrees
delta_edit_5 = [entproperty 0 $arg1]  // and the others
delta_edit_6 = [edittex $arg1] // change textures
delta_edit_9 = [selectbrush $arg1] // change heightmap brushes
delta_edit_10 = [entautoview $arg1]

delta_edit_11 = [entproperty 0 (* $arg1 $multiplier)]
delta_edit_12 = [entproperty 1 (* $arg1 $multiplier)]
delta_edit_13 = [entproperty 2 (* $arg1 $multiplier)]
delta_edit_14 = [entproperty 3 (* $arg1 $multiplier)]
delta_edit_15 = [entproperty 4 (* $arg1 $multiplier)]

delta_edit_16 = [vdelta [voffset (* $arg1 $multiplier2) 0]] // vSlot: offset H
delta_edit_17 = [vdelta [voffset 0 (* $arg1 $multiplier2)]] // vSlot: offset V
delta_edit_18 = [vdelta [vrotate $arg1]] // vSlot: rotate
delta_edit_19 = [vdelta [vscale (if (< $arg1 0) 0.5 2)]] // vSlot: scale
